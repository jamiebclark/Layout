@mixin respond-to($media) {
	@if $media == xs {
		@media only screen and (max-width: $screen-xs-max) { @content; }
	}
	@else if $media == sm {
		@media only screen and (min-width: $screen-sm-min) and (max-width: $screen-sm-max) { @content; }
	}
	@else if $media == md {
		@media only screen and (min-width: $screen-md-min) and (max-width: $screen-md-max) { @content; }
	}
	@else if $media == lg {
		@media only screen and (min-width: $screen-lg-min) { @content; }
	}
}

//Converts pixels to em (to overcome Web-kit but with browser zoom)
@function pem($pixels) {
	@return #{$pixels/16.0}em;
}

@mixin input-font-size($font-size) {
	$line-height: $font-size + 4px;
	font-size: $font-size;
	line-height: $line-height;
	height: $line-height + 2 * 1 + 2 * $input-padding-top;
}


@function opposite-side($side) {
	@if $side == 'left' {
		@return 'right';
	} @else if $side == 'right' {
		@return 'left';
	} @else if $side == 'top' {
		@return 'bottom';
	} @else if $side == 'bottom' {
		@return 'top';
	}
	@return '';
}

@mixin arrow($arrow-side, $arrow-height, $color) {
	width: 0;
	height: 0;
	position: absolute;

	@each $side in $sides {
		$border-width: $arrow-height;
		$border-color: transparent;
		$side-position: auto;
		
		@if ($side == $arrow-side) {
			$border-width: 0;
			$side-position: -1 * ($arrow-height - 1);
		} @else if ($side == opposite-side($arrow-side)) {
			$border-color: $color;
		}			
		border-#{$side}: $border-width solid $border-color;
		#{$side}: $side-position;
	}

	@if ($arrow-side == 'top') {
		left: $line-height-computed;
	} @else if ($arrow-side == 'bottom') {
		left: $line-height-computed;
	} @else {
		top: $line-height-computed;
	}
}

@mixin background-opacity($color, $opacity) {
	background: $color; // The fallback
	background: rgba($color, $opacity);
}